<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans

            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
 >

    <context:component-scan base-package="com.xiexin.service,com.xiexin.log,com.xiexin.exception"/>


    <!--这里面写  spring的配置文件，主要配置和业务逻辑相关联的-->
    <!-- 数据源 ， 事务管理控制，等等和业务逻辑相关联的-->
    <!--c3p0 连接池-->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置 mybatis -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="pooledDataSource"/>
        <!--  指定mybatis，mapper 的文件的位置-->
        <property name="mapperLocations" value="classpath*:com/xiexin/dao/**/*.xml"/>
    </bean>

    <!-- 使用模板 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--扫描DAO层接口的包,创建动态代理对象,存入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.xiexin.dao"/>
    </bean>


    <!--配置事务控制-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--控制住数据源    -->
        <property name="dataSource" ref="pooledDataSource"/>
    </bean>

    <!-- 开启事务注解 -->
    <!--<tx:annotation-driven/>-->

    <!--开启事务，使用xml配值形式的事务-->
    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.xiexin.service.*.*(..))"/>
        <!--配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>

    </aop:config>
    <!--配置事务增强，事务如何切入-->
    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>

            <tx:method name="*" propagation="REQUIRED" read-only="false"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>


    <!-- ============================  Redis  ====================================== -->

    <!--Java项目操作redis两种方式,①jedis-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="300"/> <!-- 最大能够保持idel状态的对象数  -->
        <property name="maxTotal" value="60000"/> <!-- 最大分配的对象数 -->
        <property name="testOnBorrow" value="true"/> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
    </bean>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}" type="int"/>
        <constructor-arg name="timeout" value="${redis.timeout}" type="int"/>
        <!--<constructor-arg name="password" value="#{'${redis.password}'!=''?'${redis.password}':null}" />-->
        <constructor-arg name="password" value="${redis.password}"/>
        <constructor-arg name="database" value="${redis.default.db}" type="int"/>
    </bean>



    <!--Java项目操作redis两种方式,①redisTemplate-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="hostName" value="127.0.0.1"/>-->
        <!--<property name="port" value="6379"/>-->
        <!--<property name="password" value="cjkall"/>-->
        <!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
        <!--<property name="usePool" value="true"/>-->
    <!--</bean>-->

    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;https://blog.csdn.net/qq_34021712/article/details/75949706&ndash;&gt;-->
    <!--<bean id="redisUtil" class="com.xiexin.util.redis.RedisUtil">-->
        <!--&lt;!&ndash;<constructor-arg index="0"  ref="redisTemplate" />&ndash;&gt;-->
        <!--<property name="redisTemplate" ref="redisTemplate" />-->
    <!--</bean>-->

    <!--&lt;!&ndash;https://blog.csdn.net/u010142437/article/details/81629294&ndash;&gt;-->
    <!--&lt;!&ndash; 开启这个配置，spring才能识别@Scheduled注解   &ndash;&gt;-->
    <!--<task:annotation-driven scheduler="hp_Scheduler" mode="proxy"/>-->
    <!--<task:scheduler id="hp_Scheduler" pool-size="10"/>-->


</beans>